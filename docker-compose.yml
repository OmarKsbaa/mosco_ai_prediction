version: '3.8'

services:
  # API Gateway Service
  gateway:
    build: 
      context: ./backend/gateway
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    volumes:
      - ./frontend:/app/../../frontend:ro
    environment:
      - PYTHONUNBUFFERED=1
      - MODEL1_SERVICE_URL=http://model1-service:8001
      - MODEL2_SERVICE_URL=http://model2-service:8002
    depends_on:
      - model1-service
      - model2-service
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # Traditional ML Model Service
  model1-service:
    build: 
      context: ./backend/model1-service
      dockerfile: Dockerfile
    ports:
      - "8001:8001"
    environment:
      - PYTHONUNBUFFERED=1
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8001/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Deep Learning Model Service  
  model2-service:
    build: 
      context: ./backend/model2-service
      dockerfile: Dockerfile
    ports:
      - "8002:8002"
    environment:
      - PYTHONUNBUFFERED=1
      - TF_CPP_MIN_LOG_LEVEL=2
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8002/health')"]
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 3G
        reservations:
          cpus: '1'
          memory: 1.5G

networks:
  default:
    driver: bridge
